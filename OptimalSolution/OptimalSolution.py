prise = [1500,3000,2000,2000,1000] # Цена, или значение элемента. Чем оно выше - тем выше его приоритет.
volume = [1,4,3,1,1] # Масса в кг, или же вес.
MaxVolume = 4 # Максимальная масса\вес.
def OptimalSolution(prise,volume,MaxVolume):
    things = []
    list = []
    i = 0
    j = 0
    k = 0
    l = 0


    while i != len(prise):
        things.append([prise[i]]+[volume[i]]) # Создаем таблицу с элементами [i] и [j] или же x и y по таблице.
        i += 1

    while l != len(prise):
        list.append([0]*(MaxVolume+1)) # Создаем оптимальную таблицу и заполняем ее нулями.
        l+=1

    while k != len(prise):
        if things[k][1] <= j: # Если масса\вес общей таблицы строки k. Меньше или равно j - текущий вес\масса.
            list[k][j] += (things[k][0]) # Добавь к текущему элементу цену\значение элемента в общей таблицы строки k.
        else:
            list[k][j] += list[k-1][j] # Иначе добавь элемент[j] предыдущей строки оптимальной таблицы.
        if j - things[k][1] > 0: # Если текущий вес\масса - вес\масса столбца[k] больше нуля.
            list[k][j] += list[k-1][j-things[k][1]] # Добавь к оптимальной таблицы текущего элемента и строки - предыдущий елемент оптимальной таблицы[текущий вес - вес элемента общей таблицы[k]].
        j += 1 # Масса + 1.
        if j == MaxVolume+1: # Если масса равна максимально возможной+1.
            k += 1 # х + 1.
            j = 0 # у\масса\вес = 0.
    return list
i = 0
while len(prise) != i: # Выводим таблицу на экран.
    print((OptimalSolution(prise,volume,MaxVolume))[i])
    i += 1
print("Max:    " + str((OptimalSolution(prise,volume,MaxVolume))[-1][-1])) # Максимальное значение таблицы.